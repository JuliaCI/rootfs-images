name: Linux
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: write
concurrency:
  # Skip intermediate builds: all builds except for builds on the `main` branch
  # Cancel intermediate builds: only pull request builds
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/main' || github.run_number }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  linux:
    timeout-minutes: 10
    needs: build_linux
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo build_linux: ${{ needs.build_linux.result }}
      - run: exit 1
        if: needs.build_linux.result != 'success'
  build_linux:
    timeout-minutes: 120
    name: build_linux / ${{ matrix.image.slug }}
    runs-on: "ubuntu-latest${{ matrix.image.build_on }}"
    strategy:
      fail-fast: false
      matrix:
        image:
          # Build a bunch of different "agent" rootfs images.
          - {slug: 'agent_linux.aarch64', build_on: '-arm'}
          - {slug: 'agent_linux.armv7l', build_on: ''}
          - {slug: 'agent_linux.ppc64le', build_on: ''}
          - {slug: 'agent_linux.x86_64', build_on: ''}
          - {slug: 'agent_linux.i686', build_on: ''}

          # The `aws_uploader` image is a `debian`-based image that
          # contains just `awscli`, for usage in secured pipelines
          # that need to upload to AWS.
          - {slug: 'aws_uploader.x86_64', build_on: ''}

          # The `debian_minimal` image is a `debian`-based image that
          # contains no packages.
          - {slug: 'debian_minimal.aarch64', build_on: '-arm'}
          - {slug: 'debian_minimal.armv7l', build_on: ''}
          - {slug: 'debian_minimal.ppc64le', build_on: ''}
          - {slug: 'debian_minimal.x86_64', build_on: ''}
          - {slug: 'debian_minimal.i686', build_on: ''}

          # The `latex` image is used to build the PDF docs
          - {slug: 'latex.x86_64', build_on: ''}

          # The `llvm_passes` image contains `gfortran`, so we use it for our
          # "from source" (`USE_BINARYBUILDER=0`) jobs.
          - {slug: 'llvm_passes.aarch64', build_on: '-arm'}
          - {slug: 'llvm_passes.armv7l', build_on: ''}
          - {slug: 'llvm_passes.i686', build_on: ''}
          - {slug: 'llvm_passes.powerpc64le', build_on: ''}
          - {slug: 'llvm_passes.x86_64', build_on: ''}

          # The `npm_linux` image is a helper for ecosystem jobs that need to build NPM packages
          - {slug: 'npm_linux.x86_64', build_on: ''}

          # The `package_linux` images are all `debian`-based.
          - {slug: 'package_linux.aarch64', build_on: '-arm'}
          - {slug: 'package_linux.armv7l', build_on: ''}
          - {slug: 'package_linux.i686', build_on: ''}
          - {slug: 'package_linux.powerpc64le', build_on: ''}
          - {slug: 'package_linux.x86_64', build_on: ''}

          # The `package_musl` image is `alpine`-based.
          - {slug: 'package_musl.x86_64', build_on: ''}

          # The `pkgserver_logsync` image is a helper for https://github.com/JuliaPackaging/PkgServerLogAnalysis.jl
          - {slug: 'pkgserver_logsync.x86_64', build_on: ''}

          # The `rr` image is `debian`-based.
          # It is used for building rr from source and running the rr test suite.
          - {slug: 'rr.aarch64', build_on: '-arm'}
          - {slug: 'rr.x86_64', build_on: ''}

          # The `tester_linux` images are all `debian`-based.
          # They do not include the compiler toolchain.
          - {slug: 'tester_linux.aarch64', build_on: ''}
          - {slug: 'tester_linux.armv7l', build_on: ''}
          - {slug: 'tester_linux.i686', build_on: ''}
          - {slug: 'tester_linux.powerpc64le', build_on: ''}
          - {slug: 'tester_linux.x86_64', build_on: ''}

          # The `tester_musl` image is `alpine`-based.
          # It does not include the compiler toolchain.
          - {slug: 'tester_musl.x86_64', build_on: ''}

          # The `xvfb` image is used in the CI for the PkgEval.jl repo
          - {slug: 'xvfb.aarch64', build_on: ''}
          - {slug: 'xvfb.x86_64', build_on: ''}

          # The `yggdrasil` image is used in the CI for the Yggdrasil repo
          - {slug: 'yggdrasil.x86_64', build_on: ''}
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1.6'
          arch: x64
      - run: |
          import Pkg
          ENV["JULIA_PKG_SERVER"] = ""
          Pkg.Registry.add("General")
        shell: julia --color=yes {0}
      - run: sudo apt-get update
      - run: sudo apt-get -y install binfmt-support debootstrap qemu-user-static
      - run: update-binfmts --display
      - run: julia --color=yes --project=. -e 'import Pkg; @time Pkg.instantiate()'
      - run: julia --color=yes --project=. -e 'import Pkg; @time Pkg.precompile()'
      - run: julia --color=yes --project=. -e '@time import RootfsUtils'
      - run: |
          IMAGE_NAME=$(echo ${{ matrix.image.slug }} | cut -d. -f1)
          IMAGE_ARCH=$(echo ${{ matrix.image.slug }} | cut -d. -f2)
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_ARCH=$IMAGE_ARCH" >> $GITHUB_ENV
      - run: julia --color=yes --project=. linux/${{ env.IMAGE_NAME }}.jl --arch=${{ env.IMAGE_ARCH }}
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "The tarball name is ${{ steps.build.outputs.tarball_name }}"
      - run: echo "The tarball path is ${{ steps.build.outputs.tarball_path }}"
      - uses: actions/upload-artifact@v4
        if: steps.build.outputs.tarball_name != '' && steps.build.outputs.tarball_path != ''
        with:
          name: ${{ steps.build.outputs.tarball_name }}
          path: ${{ steps.build.outputs.tarball_path }}
          if-no-files-found: error
