name: Build
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents:            write
  actions:             none
  checks:              none
  deployments:         none
  issues:              none
  discussions:         none
  packages:            none
  pull-requests:       none
  repository-projects: none
  security-events:     none
  statuses:            none
jobs:
  all:
    name: all
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo "All build jobs have completed."
  build:
    name: ${{ matrix.image }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          # Build a bunch of different "agent" rootfs images.
          - 'agent_linux.aarch64'
          - 'agent_linux.armv7l'
          - 'agent_linux.ppc64le'
          - 'agent_linux.x86_64'

          # The `package_linux` images are all `debian`-based.
          - 'package_linux.aarch64'
          - 'package_linux.armv7l'
          - 'package_linux.i686'
          - 'package_linux.powerpc64le'
          - 'package_linux.x86_64'

          # The `package_linux_qemu` images are all `debian`-based.
          # They are just like the `package_linux` images, except they also include
          # `qemu` inside the sandbox.
          - 'package_linux_qemu.aarch64'
          - 'package_linux_qemu.armv7l'
          - 'package_linux_qemu.i686'
          - 'package_linux_qemu.powerpc64le'
          - 'package_linux_qemu.x86_64'

          # The `package_musl` image is `alpine`-based.
          - 'package_musl.x86_64'

          # The `tester_linux` images are all `debian`-based.
          # They do not include the compiler toolchain.
          - 'tester_linux.aarch64'
          - 'tester_linux.armv7l'
          - 'tester_linux.i686'
          - 'tester_linux.powerpc64le'
          - 'tester_linux.x86_64'

          # The `tester_musl` image is `alpine`-based.
          # It does not include the compiler toolchain.
          - 'tester_musl.x86_64'

          # The `llvm_passes` image is a short-term solution for the `analyzegc` builder.
          - 'llvm_passes.x86_64'
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1.6'
          arch: x64
      - run: sudo apt-get update
      - run: sudo apt-get -y install binfmt-support debootstrap qemu-user-static
      - run: update-binfmts --display
      - run: julia --color=yes --project=. -e 'using Pkg; @time Pkg.instantiate()'
      - run: julia --color=yes --project=. -e 'using Pkg; @time Pkg.precompile()'
      - run: julia --color=yes --project=. -e '@time using RootfsUtils'
      - run: |
          IMAGE_NAME=$(echo ${{ matrix.image }} | cut -d. -f1)
          IMAGE_ARCH=$(echo ${{ matrix.image }} | cut -d. -f2)
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_ARCH=$IMAGE_ARCH" >> $GITHUB_ENV
      - run: julia --color=yes --project=. images/${{ env.IMAGE_NAME }}.jl --arch=${{ env.IMAGE_ARCH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
